name: CI/CD

on:
  push:
    branches: [master]
    paths-ignore:
      - "**/README.md"
      - "**/LICENSE"
      - "**/.editorconfig"
      - "**/certificate.cnf"
      - "**/certificate.crt"
      - "**/localhost.key"
      - "**/localhost.crt"
      - "**/localhost.pfx"
      - "**/.prettierrc"
      - "**/.vscode/*"
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [master]
    paths-ignore:
      - "**/README.md"
      - "**/LICENSE"
      - "**/.editorconfig"
      - "**/certificate.cnf"
      - "**/certificate.crt"
      - "**/localhost.key"
      - "**/localhost.crt"
      - "**/localhost.pfx"
      - "**/.prettierrc"
      - "**/.vscode/*"
  workflow_dispatch:

jobs:
  PathsFilter:
    runs-on: ubuntu-latest
    outputs:
      PrivateAdmin: ${{ steps.filter.outputs.PrivateAdmin }}
      PublicAdmin: ${{ steps.filter.outputs.PublicAdmin }}
      KarmaWeb: ${{ steps.filter.outputs.KarmaWeb }}
      AdminWeb: ${{ steps.filter.outputs.AdminWeb }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Paths filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            PrivateAdmin:
              - 'src/PrivateAdmin/**'
            PublicAdmin:
              - 'src/PublicAdmin/**'
            KarmaWeb:
              - 'src/KarmaWeb/**'
            AdminWeb:
              - 'src/AdminWeb/**'
  BuildWebsites:
    runs-on: ubuntu-latest
    needs: PathsFilter
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "24.8.0"
      - name: AdminWeb
        working-directory: ./src/AdminWeb
        if: needs.PathsFilter.outputs.AdminWeb == 'true'
        run: |
          npm ci
          npm run production
  CreateDockerImage:
    runs-on: ubuntu-latest
    needs: [PathsFilter, BuildWebsites]
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Login to the container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: AdminWeb
        uses: docker/build-push-action@v6
        if: needs.PathsFilter.outputs.AdminWeb == 'true'
        with:
          context: src/AdminWeb
          push: true
          tags: ghcr.io/grillbot/grillbot.web:admin_web
  AdminWeb_Production:
    runs-on: ubuntu-latest
    environment: Production_AdminWeb
    needs: [PathsFilter, CreateDockerImage]
    if: github.ref == 'refs/heads/master' && needs.PathsFilter.outputs.AdminWeb == 'true'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S /scripts/update-grillbot-prod.sh admin_web
  PrivateAdmin_Build:
    runs-on: ubuntu-latest
    needs: PathsFilter
    if: needs.PathsFilter.outputs.PrivateAdmin == 'true'
    defaults:
      run:
        working-directory: src/PrivateAdmin/
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Production build
        run: npm run build
  PrivateAdmin_CreateDockerImage:
    runs-on: ubuntu-latest
    needs: PrivateAdmin_Build
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Log in to the container repository
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: src/PrivateAdmin
          push: true
          tags: ghcr.io/grillbot/grillbot.web:private_admin
  PrivateAdmin_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_PrivateAdmin"
    needs: PrivateAdmin_CreateDockerImage
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S /scripts/update-grillbot-prod.sh private_admin_web
  PublicAdmin_Build:
    runs-on: ubuntu-latest
    needs: PathsFilter
    if: needs.PathsFilter.outputs.PublicAdmin == 'true'
    defaults:
      run:
        working-directory: src/PublicAdmin/
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Production build
        run: npm run build
  PublicAdmin_CreateDockerImage:
    runs-on: ubuntu-latest
    needs: PublicAdmin_Build
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Log in to the container repository
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: src/PublicAdmin
          push: true
          tags: ghcr.io/grillbot/grillbot.web:public_admin
  PublicAdmin_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_PublicAdmin"
    needs: PublicAdmin_CreateDockerImage
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S /scripts/update-grillbot-prod.sh public_admin_web
  KarmaWeb_Build:
    runs-on: ubuntu-latest
    needs: PathsFilter
    if: needs.PathsFilter.outputs.KarmaWeb == 'true'
    defaults:
      run:
        working-directory: src/KarmaWeb/
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Install dependencies
        run: npm ci
      - name: Production build
        run: npm run build
  KarmaWeb_CreateDockerImage:
    runs-on: ubuntu-latest
    needs: KarmaWeb_Build
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Log in to the container repository
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: src/KarmaWeb
          push: true
          tags: ghcr.io/grillbot/grillbot.web:karma
  KarmaWeb_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_KarmaWeb"
    needs: KarmaWeb_CreateDockerImage
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S /scripts/update-grillbot-prod.sh karma_web
